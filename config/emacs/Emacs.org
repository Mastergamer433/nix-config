#+title MG433's Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* General Configuration
** User Interface
Clean up Emacs' user interface, I like it being more minimal.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)



#+end_src
Improve scrolling
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse 't
        scroll-step 1
        use-dialog-box nil)
#+end_src

Enable line numbers, but disable it for some modes.
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes.
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Line Numbers.
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src

Make the cursor highlighted.

#+begin_src emacs-lisp
  ;; Highlight cursor line.
  (global-hl-line-mode t)
#+end_src

Don’t warn for large files (shows up when launching videos)
#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src

Don’t warn for following symlinked files

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
Don’t warn when advice is added for functions

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

** Theme
I like a bounch of themes but right now i like dracula most.
#+begin_src emacs-lisp
  (use-package doom-themes)
  (use-package spacegray-theme)
  (load-theme 'doom-dracula t)
#+end_src

** Font
*** Set the font
#+begin_src emacs-lisp
;; Set the font
(set-face-attribute 'default nil :font "Fira Code" :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 100)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Fira Code" :height 120 :weight 'regular)
#+end_src

*** All the icons
Now I don't know if this should be in font or modeline cause I am only using it in the modeline but it is fonts so.
This is what makes the modeline look nice(a circle as the state instead of <N> <I> and so on).
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src
*** Emojis in buffers
Sometime i'd like emacs to show emojis in buffers.
#+begin_src emacs-lisp
  (use-package emojify)
#+end_src

** Mode Line
*** Basic Customization
#+begin_src emacs-lisp
  (setq display-time-format "%l:%M %p %b %d"
      display-time-load-average-threshold 0.0)
#+end_src

*** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 30)))
#+end_src

** Workspaces
I like having workspaces in emacs, so I dont have to have multiple emacs instance and all that headache.
#+begin_src emacs-lisp
  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    (persp-mode-prefix-key (kbd "C-c C-p"))
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src

** Notifications
Alert is a great library for showing notifications from other packages in a variety of ways.

#+begin_src emacs-lisp
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+end_src

** Displaying World Time
display-time-world command provides a nice display of the time at a specified list od timezones.
#+begin_src emacs-lisp
  (setq display-time-world-list
        '(("Etc/UTC" "UTC")
          ("Europe/Stockholm" "Stockholm")
          ("America/Los_Angeles" "Seattle")
          ("America/Denver" "Denver")
          ("America/New_York" "New York")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+end_src

* Completion System
** Preserve Minibuffer History with savehist-mode
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))
#+end_src

** Completions with vertico
#+begin_src emacs-lisp
  (defun keo/minibuffer-backward-kill (arg)
    (interactive "p")
    (cond
     ;; When minibuffer has ~/
     ((and minibuffer-completing-file-name
           (string= (minibuffer-contents-no-properties) "~/"))
      (delete-minibuffer-contents)
      (insert "/home/"))

     ;; When minibuffer has some file and folder names
     ((and minibuffer-completing-file-name
           (not (string= (minibuffer-contents-no-properties) "/"))
           (= (preceding-char) ?/))
      (delete-char (- arg))
      (zap-up-to-char (- arg) ?/))

     ;; All other cases
     (t
      (delete-char (- arg)))))

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word)
                ("" . keo/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

** Completions in Regions with Corfu
#+begin_src emacs-lisp
    ;; Enable Corfu completion UI
    ;; See the Corfu README for more configuration tips.
    (use-package corfu
      :bind (("TAB" . corfu-insert))
      :custom
      (corfu-auto t)
      (corfu-echo-documentation nil)
      :init
      (global-corfu-mode))

    ;; Disable auto completion-at-point for some modes.
    (dolist (mode '(term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook
                    lsp-mode-hook))
      (add-hook mode (lambda () (setq-local corfu-auto nil))))

    ;; Add extensions
    (use-package cape
      ;; Bind dedicated completion commands
      ;; Alternative prefix keys: C-c p, M-p, M-+, ...
      :bind (("C-c c p" . completion-at-point) ;; capf
             ("C-c c t" . complete-tag)        ;; etags
             ("C-c c d" . cape-dabbrev)        ;; or dabbrev-completion
             ("C-c c h" . cape-history)
             ("C-c c f" . cape-file)
             ("C-c c k" . cape-keyword)
             ("C-c c s" . cape-symbol)
             ("C-c c a" . cape-abbrev)
             ("C-c c i" . cape-ispell)
             ("C-c c l" . cape-line)
             ("C-c c w" . cape-dict)
             ("C-c c \\" . cape-tex)
             ("C-c c _" . cape-tex)
             ("C-c c ^" . cape-tex)
             ("C-c c &" . cape-sgml)
             ("C-c c r" . cape-rfc1345))
      :init
      ;; Add `completion-at-point-functions', used by `completion-at-point'.
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)
      (add-to-list 'completion-at-point-functions #'cape-file)
      ;;(add-to-list 'completion-at-point-functions #'cape-history)
      ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
      ;;(add-to-list 'completion-at-point-functions #'cape-tex)
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
      ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
      ;;(add-to-list 'completion-at-point-functions #'cape-dict)
      ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
      ;;(add-to-list 'completion-at-point-functions #'cape-line)
      )
#+end_src
** Consult Commands
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("C-s" . consult-line)
           ("C-S-s" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
  )
#+end_src

** Improved Candidate Filtering with Orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Completion Annotations with Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Completion Actions with Embark
#+begin_src emacs-lisp
  (use-package embark

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Window Management
** Window Selection with ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+end_src

** Window History with winner-mode
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :after evil
    :config
    (winner-mode)
    (define-key evil-window-map "u" 'winner-undo)
    (define-key evil-window-map "U" 'winner-redo))
#+end_src

* Development
** Git
Magit
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

Magit todos
#+begin_src emacs-lisp
  (use-package magit-todos)
#+end_src

Projectile
#+begin_src emacs-lisp
  (defun dw/switch-project-action ()
    "Switch to a workspace with the project name and start `magit-status'."
    ;; TODO: Switch to EXWM workspace 1?
    (persp-switch (projectile-project-name))
    (magit-status))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'dw/switch-project-action))

  (use-package counsel-projectile
    :after projectile
    :bind (("C-M-p" . counsel-projectile-find-file))
    :config
    (counsel-projectile-mode))
#+end_src

** Languages
*** Language server support with eglot
#+begin_src emacs-lisp
  (use-package eglot
    :bind (:map eglot-mode-map
                ("C-c C-a" . eglot-code-actions)
                ("C-c C-r" . eglot-rename))
    :config
    (setq eglot-autoshutdown t
          eglot-confirm-server-initiated-edits nil)
    (add-to-list 'eglot-server-programs
                 '((js2-mode typescript-mode) . ("typescript-language-server" "--stdio"))))
#+end_src

*** Debug Adapter Support
#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

*** Meta Lisp
#+begin_src emacs-lisp
  (use-package lispy
    :hook ((emacs-lisp-mode . lispy-mode)
           (scheme-mode . lispy-mode)))

  (use-package lispyville
    :hook ((lispy-mode . lispyville-mode))
    :config
    (lispyville-set-key-theme '(operators c-w additional
                                          additional-movement slurp/barf-cp
                                          prettify)))
#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

*** Common Lisp
#+begin_src emacs-lisp
  (use-package slime
    :config
    (setq inferior-lisp-program "sbcl"))
#+end_src

*** Scheme
#+begin_src emacs-lisp
  (use-package geiser)
  (use-package geiser-guile)
#+end_src

*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2)
    (require 'dap-node))
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

*** Haskell
#+begin_src emacs-lisp
    (use-package haskell-mode
      :mode "\\.hs\\'"
)
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))
#+end_src

*** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'"
    :hook (lua-mode . lsp-deferred))
>>>>>>> 39619946817a5df8de6dcb7fe07c121f4abdc94e
#+end_src
** Snippets with yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/emacs/snippets"))
    (yas-global-mode 1))
#+end_src

* Applications
** Mail
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "Private"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "teknikgillaren@gmail.com")
                    (user-full-name    . "Karl Elis Odenhage")
                    (mu4e-drafts-folder  . "/Gmail/Drafts")
                    (mu4e-sent-folder  . "/Gmail/Sent Mail")
                    (mu4e-refile-folder  . "/Gmail/All Mail")
                    (mu4e-trash-folder  . "/Gmail/Trash")
                    (smtpmail-smtp-server . "smtp.google.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type . ssl)))))

    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-maildir-shortcuts
          '(("/Inbox"     . ?i)
            ("/Sent Mail" . ?s)
            ("/Trash"     . ?t)
            ("/Drafts"    . ?d)
            ("/All Mail"  . ?a))))


  (use-package org-mime
    :bind
    ("C-<return>" . org-mime-htmlize))
#+end_src

** Media
*** mpv
#+begin_src emacs-lisp
  (use-package mpv)
#+end_src
*** Controlling
#+begin_src emacs-lisp
  (use-package playerctl)
#+end_src

** Chatting
*** ERC
I like IRC so I wanna use ERC an IRC client for Emacs.
#+begin_src emacs-lisp
  (use-package erc
    :ensure nil
    :config
    
    )
#+end_src

** Mastodon
#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (setq mastodon-instance-url "https://emacs.ch"
          mastodon-active-user "Mastergamer433")
    (mastodon-discover))
#+end_src

** Firefox
#+begin_src emacs-lisp
  (use-package edit-server
    :config
    (setq edit-server-new-frame t)
    :init
    (edit-server-start))
#+end_src

* Org mode
** Basic configuration
#+begin_src emacs-lisp
  (defun keo/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (defun keo/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . keo/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-clock-sound "~/.emacs.d/timer-stop.wav")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/OrgFiles/Calendar.org"))

    (setq org-image-actual-width nil)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Calendar.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@school" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(keo/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

          (define-key global-map (kbd "C-c j")
            (lambda () (interactive) (org-capture nil "jj")))

          (keo/org-font-setup))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (defun keo/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . keo/org-mode-visual-fill))

    (setq org-startup-folded t)

#+end_src

*Guix Packages*
#+begin_src scheme :noweb-ref packages :noweb-sep "\n"
  "emacs-org"
  "emacs-org-bullets"
  "emacs-visual-fill-column"
#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

#+end_src

** Auto-tangle configuration files
#+begin_src emacs-lisp

    ;; Automatically tangle our Emacs.org config file when we save it
    (defun keo/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name "~/.dotfiles/"))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'keo/org-babel-tangle-config)))

#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/Notes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("l" "programming language" plain
        "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)
       ("b" "book notes" plain
        (file "~/Notes/Templates/BookNoteTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
        :unnarrowed t)
       ))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%H:%M>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n"))
       ("t" "Task" entry
        #'org-roam-capture--get-point
        "* TODO %?\n  %U\n  %a\n  %i"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Tasks")
        :empty-lines 1
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    (org-roam-setup))
#+end_src

*Guix Packages*
#+begin_src scheme :noweb-ref packages :noweb-sep "\n"
  "emacs-org-roam"
#+end_src

** Org Present
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :after org
    :config
    (define-key org-tree-slide-mode-map (kbd "<f5>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f6>") 'org-tree-slide-move-next-tree))
  (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
  (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
#+end_src

*Guix Packages*
#+begin_src scheme :noweb-ref packages :noweb-sep "\n"
  "emacs-org-tree-slide"
#+end_src

** Org CalDav
#+begin_src emacs-lisp
      (use-package org-caldav
        :init
        (setq org-caldav-url 'google
              org-caldav-clendar-id "88d59157cbf81579069338800a049a251ceb2bbbaa0704ab124ccec464c839ba@group.calendar.google.com"
              org-caldav-inbox "~/OrgFiles/Calendar.org"
              org-icalendar-timezone "Europe/Stockholm"))
#+end_src

* Keyboard keybinds
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** General
#+begin_src emacs-lisp
    (use-package general
    :config
    (general-create-definer keo/exwm-keyboard
      :keymaps '(normal insert visual emacs)
      :prefix "s"
      :global-prefix "s")
    (general-create-definer keo/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))
#+end_src

** General leader key
#+begin_src emacs-lisp
    (keo/leader-keys
    "t"  '(:ignore t :which-key "Toggles")
    "tt" '(counsel-load-theme :which-key "Choose Theme")
    "o" '(:ignore t :which-key "Org")
    "oa" '(org-agenda-list :which-key "List Org Agenda")
    "ob" '(:ignore t :which-key "Bable")
    "obt" '(org-babel-tangle :which-key "Tangle")
    "b" '(:ignore t :which-key "Buffer")
    "bs" '(consult-buffer :which-key "Switch Buffer")
    "w" '(:ignore :which-key "EXWM")
    "wr" '(exwm-reset)
    "ww" '(exwm-workspace-switch :which-key "Switch workspace")
    "wh" '(windmove-left :which-key "Focus the window to the left")
    "wj" '(windmove-down :which-key "Focus the window down") 
    "wk" '(windmove-up :which-key "Focus the window up")
    "wl" '(windmove-right :which-key "Focus the window to the right")
    "w&" '(lambda (command)
            (interactive (list (read-shell-command "$ ")))
            (start-process-shell-command command nil command))
    "wf" '(exwm-layout-toggle-fullscreen)
    "e" '(:ignore t :which-key "ERC")
    "ej" '(lambda () (interactive)
            (insert "/join #") :which-key "Join")
    "eq" '(lambda () (interactive)
            (insert "/quit")
            (erc-send-current-line) :which-key "Quit")

    "p" '(:ignore t :which-key "pass")
    "pp" '(password-store-copy :which-key "Copy")
    "pn" '(password-store-insert :which-key "New")
    "pg" '(password-store-generate :which-key "Generate")
    "s" '(:ignore t :which-key "Spotify")
    "sP" '(counsel-spotify-toggle-play-pause :which-key "Play/Pause")
    "sn" '(counsel-spotify-next :which-key "Next")
    "sp" '(counsel-spotify-previous :which-key "Previuos")
    "sst" '(counsel-spotify-search-track :which-key "Search Track"))
#+end_src

* My own Emacs package
